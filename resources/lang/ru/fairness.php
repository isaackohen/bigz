<?php

return [
    'tabs' => [
        'overview' => 'Обзор',
        'dev' => 'Реализация',
        'transform' => 'Конвертация',
        'events' => 'События игры',
        'calculator' => 'Расчет'
    ],
    'overview' => [
        '1' => "<h6>Решение проблемы доверия с онлайн азартными играми</h6>
                <p>Концепт <a href='https://en.wikipedia.org/wiki/Provably_fair' target='_blank'>доказуемой честности</a>: игроки имеют возможность проверить и доказать, что их результаты игр честны и не были подменены.
                Эту цель удалось достичь благодаря <a href='https://ru.wikipedia.org/wiki/%D0%A1%D1%85%D0%B5%D0%BC%D0%B0_%D0%BE%D0%B1%D1%8F%D0%B7%D0%B0%D1%82%D0%B5%D0%BB%D1%8C%D1%81%D1%82%D0%B2%D0%B0' target='_blank'>схеме обязательств</a> вместе с криптографическим хэшированием.</p>
                <p>Схема обязательства использована для обеспечения влияния игрока на все полученные результаты. Криптографическое хеширование используется, чтобы гарантировать, что казино также остается честным по отношению к этой схеме обязательств. Обе эти концепции в совокупности создают доверие для онлайн азартных игр.</p>
                <p>Это упрощено в следующем представлении;</p>"
    ],
    'dev' => [
        '1' => "<h6>Генерация случайных чисел</h6>
                <p>Для каждой проверямой ставки мы используем: клиенский сид, серверный сид, nonce и cursor как параметры ввода для функции генерирования случайных чисел.
                Функция использует криптографический хэш <strong>HMAC_SHA256</strong> для генерирования байтов, которые затем используются в качестве основы для того, как мы генерируем достоверно случайные результаты на нашей платформе.</p>",
        '2' => "<h6 class='mt-4'>Серверный сид</h6>
                Серверный сид генерируется нашей системой в виде случайной строки из 32 символов перед началом игры, которую вы не можете узнать до её полного завершения. Причина, по которой мы не предоставляем вам серверный сид в любой момент заключается в том, что в этом случае игрок бы смог рассчитать результаты игр заранее.
                <h6 class='mt-4'>Клиентский сид</h6>
                Клиентский сид принадлежит игроку и используется чтобы гарантировать, что игрок также влияет на случайность сгенерированных результатов. Без этого компонента алгоритма только серверный сид будет иметь полное влияние на результат каждой ставки.
                Все игроки могут свободно редактировать и менять свои клиентские сиды регулярно, чтобы создать новую цепочку случайных предстоящих результатов. Это гарантирует, что игрок имеет абсолютный контроль над генерацией результата, подобно разрезанию колоды в обычном казино.
                Во время регистрации ваш браузер создает клиентское семя, чтобы обеспечить бесперебойную работу с сайтом. Хотя это случайно сгенерированное клиентское начальное число считается подходящим, мы настоятельно рекомендуем вам выбрать свое собственное, чтобы ваше влияние было включено в случайность.
                Вы можете сделать это в настройках своего профиля.
                <h6 class='mt-4'>Nonce</h6>
                Nonce - это просто число, которое увеличивается на 1 при каждой вашей новой ставке. Из-за особенностей криптографической функции SHA256 каждый раз создается совершенно новый результат.
                Реализация nonce гарантирует, что мы сохраняем приверженность вашей клиентской и серверной паре, в то же время генерируя новые результаты для каждой сделанной ставки.
                <h6 class='mt-4'>Cursor</h6>
                Мы используем 4 байта данных для генерации одного игрового результата. Поскольку SHA256 ограничен 32 байтами, мы используем эту реализацию курсора, чтобы дать нам возможность создавать больше игровых событий без необходимости изменять наш доказуемый алгоритм честности.
                Курсор итерируется только тогда, когда в игру требуется получить более 8 (32 байта / 4 байта) возможных результатов. Например: когда нам нужно использовать более 8 карт в игре в блэкджек.
                Курсор начинается с 0 и увеличивается на 1 каждый раз, когда 32 байта возвращаются функцией HMAC_SHA256. Если нам не требуется, чтобы для игровых событий было сгенерировано более 8 случайных чисел, курсор не увеличивается, поскольку нет необходимости генерировать какие-либо дополнительные возможные результаты игры."
    ],
    'transform' => [
        '1' => "<h6>Байты в числа с плавающей запятой</h6>
                <p>Результат функции генератора случайных чисел (byteGenerator) представляет собой шестнадцатеричный 32-байтовый хеш.
                Как объясняется в реализации курсора, мы используем 4 байта данных для генерации одного игрового результата.
                Каждый набор из 4 байтов используется для генерации значений с плавающей запятой в диапазоне от 0 до 1
                (4 байта используются вместо одного, чтобы обеспечить более высокий уровень точности при генерации числа с плавающей запятой.)
                Именно с этими сгенерированными числами мы получаем формальный результат доказуемого честный алгоритма, прежде чем он будет переведен в игровые события.</p>",
        '2' => "<h6 class='mt-4'>Числа с плавающей запятой в игровые события</h6>
                <p>Так как процесс генерации случайных чисел является универсальным для всех наших игр,
                именно на этом этапе генерации игрового результата реализуется уникальная процедура,
                позволяющая определить перевод из числа с плавающей запятой в игровые события.
                Произведенный случайным образом результат умножается на возможные оставшиеся результаты конкретной игры.
                Например: в игре, в которой используется колода из 52 карт это можно сделать, просто умножив число на 52.
                Результат этого уравнения затем преобразуется в соответствующее игровое событие.
                Для игр, где требуется несколько игровых событий, этот процесс продолжается через каждые соответствующие 4 байта в цепочке результатов,
                которая была сгенерирована с использованием описанной функции byteGenerator.</p>
                <h6 class='mt-4'>Перемешивание игровых событий</h6>
                <p>Для таких игр, как Keno, Mines и Video Poker, где результаты не могут быть дублированы, мы используем алгоритм случайного перемешивания <a href='https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle' target='_blank'>Фишера-Йейтса</a>.</p>"
    ],
    'events' => [
        '1' => "<p>Игровые события - это перевод случайно сгенерированных чисел в соответствующий результат, специфичный для игры.
                Это включает в себя все, от результата броска костей до порядка карт в колоде, или даже местоположение каждой бомбы в Mines.
                Ниже приводится подробное объяснение того, как мы переводим числа в события для каждой конкретной игры на нашей платформе.</p>
                <h6>Blackjack, Hilo & Baccarat</h6>
                <p>В стандартной колоде карт есть 52 уникальных возможных результата:</p>",
        '2' => "<h6>Diamonds</h6>
                <p>При игре в Diamonds есть 7 возможных результатов в виде алмазов. Чтобы достичь этого мы умножаем каждое число с плавающей точкой на 7,
                а затем переводим его в соответствующий алмаз:</p>",
        '3' => "<p>Затем игрок получает 5 алмазов.</p>
                <h6>Dice</h6>
                <p>В нашей версии игры Dice мы покрываем возможный разброс броска от 00.00 до 100.00,
                который имеет диапазон 10,001 возможных результатов.
                Перевод игровых событий выполняется путем умножения числа с плавающей запятой на количество возможных результатов,
                а затем производится деление на 100, чтобы полученное число соответствовало ограничениям нашего заявленного диапазона игральных костей.</p>",
        '4' => "<h6>Limbo</h6>
                <p>Когда дело доходит до Limbo, мы используем двухэтапный процесс.
                Во-первых, мы берем число и умножаем его на максимально возможный множитель и на % преимущества казино.
                Затем, чтобы сгенерировать игровое событие при помощи <a href='https://en.wikipedia.org/wiki/Probability_distribution' target='_blank'>распределения вероятностей</a>,
                мы делим максимально возможный множитель на результат первого шага, чтобы создать игровое событие в форме конечного коэффициента.</p>",
        '5' => "<h6>Plinko</h6>
                <p>Для любой игры в Plinko сгенерированный результат основан на том, в какую ячейку упадет шарик.</p>",
        '6' => "<h6>Roulette</h6>
                <p>Наша рулетка взята из европейской версии игры, в которой колесо состоит из 37 возможных различных карманов в диапазоне от 0 до 36.
                Игровое событие рассчитывается путем умножения числа на 37, а затем переводится в соответствующий карман:</p>",
        '7' => "<h6>Keno</h6>
                <p>Традиционные игры Keno требуют выбора 10 возможных игровых событий в форме ячеек на игровой доске.
                Чтобы достичь этого, мы умножаем каждое число с плавающей точкой на количество возможных уникальных квадратов.</p>",
        '8' => "<p>Реализация случайной последовательности Фишера-Йейтса используется для предотвращения дублирования возможных попаданий.</p>
                <h6>Mines</h6>
                <p>Mines состоит из 24 отдельных игровых событий в виде мин на игровом поле.
                Каждое число умножается на количество возможных уникальных плиток, все еще оставшихся на доске.
                Местоположение ячеек строится с использованием положения сетки слева направо, сверху вниз.
                Реализация случайной последовательности Фишера-Йейтса используется для предотвращения дублирования возможных попаданий.
                В зависимости от выбранных настроек используются от 2 до 24 результатов игровых событий.</p>
                <h6>Video Poker</h6>
                <p>Игра в Video Poker включает в себя 52 отдельных игровых события в виде карт в колоде.
                Каждое число умножается на количество возможных карт, оставшихся в колоде.</p>",
        '9' => "<p>Реализация случайной последовательности Фишера-Йейтса используется для предотвращения дублирования возможных попаданий.</p>"
    ],
    'calculator' => [
        'game' => 'Игра',
        'client_seed' => 'Сид клиента',
        'nonce' => 'Nonce',
        'server_seed' => 'Сид сервера',
        'result' => 'Конечный результат',
    ]
];
